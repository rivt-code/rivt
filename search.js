window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "rivtlib.__init__", "modulename": "rivtlib.__init__", "kind": "module", "doc": "<p><strong>rivt</strong> is an open source engineering document markdown language for writing,\norganizing and sharing engineering documents. <strong>rivtlib</strong> is a Python library\nfor processing rivt. It runs on any platform that supports Python 3.10 or\nlater. rivtlib works with both single file documents and extensive reports with\nhundreds of files. </p>\n\n<p>A rivt file is a Python file that begins with the import statement:</p>\n\n<p><em>import rivtlib.rivtapi as rv</em></p>\n\n<p>which provides four API functions. Each function takes a single, triple quoted\nstring as an argument.</p>\n\n<p>rv.R(rS) - report and document configuration (Rivtinit)\nrv.I(rS) - static text, images, tables and math (Insert)\nrv.V(rS) - equations (Values)\nrv.T(rS) - Python functions and scripts (Tools)\nrv.write() - formatted rivt document output</p>\n\n<p>rv.R may be followed by arbitrary sequences of rv.I, rv.V and rv.T. When\nrunning in an IDE (e.g. VSCode), each function may be run interactively using\nthe standard cell decorator <em># %%</em>. Interactive output and output to stdout\n(terminal) is formatted as utf-8 text. The rv.write() function exports\ncalculated values to a file for later use, and generates formatted documents\nand reports in GitHub Markdown (ghmd) and PDF.</p>\n\n<p>rivt syntax includes arbitrary unicode and rivt commands and tags. It wraps and\nextends reStructuredText (reST).  See <a href=\"https://rivt-doc.net\">https://rivt-doc.net</a>  for user manual</p>\n\n<p>========</p>\n\n<h1 id=\"commands\">commands</h1>\n\n<p>A rivt command reads or writes external files and is triggered by starting a\nline with ||. Commands are implemented per API function. Either-or parameter\nchoices below are designated with semi-colons. List parameters are separated\nwith commas.</p>\n\n<p>=============== ===============================================================\n name                      Commands (VSCode snippet prefix)\n=============== ===============================================================</p>\n\n<p>Rivtinit (ri)       rv.R(\"\"\"label | toc;notoc,start page</p>\n\n<pre><code>                    ||text (te)\n                    ||append (ap)\n\n                    \"\"\")\n</code></pre>\n\n<p>Insert (in)         rv.I(\"\"\"label | nocolor;hexvalue  </p>\n\n<pre><code>                    ||image (im)\n                    ||text (te)\n                    ||table (ta)\n\n                \"\"\")\n</code></pre>\n\n<p>Values (va)         rv.V(\"\"\"label | sub;nosub </p>\n\n<pre><code>                    ||declare (de)\n\n                    \"\"\")\n</code></pre>\n\n<p>Tools (to)          rv.T(\"\"\"label | summary;inline</p>\n\n<pre><code>                    Python code\n\n                    \"\"\")\n</code></pre>\n\n<p>Exclude             rv.X(\"\"\"any API function</p>\n\n<pre><code>                    A method changed to X is not evaluated (used for\n                    comments and debugging).\n\n                \"\"\")\n</code></pre>\n\n<p>Write (pu)          rv.write_public(text,md,pdf,report)\n      (pr)          rv.write_private(text,md,pdf,report)</p>\n\n<p>================================================ ============== \n       command syntax                                API <br />\n================================================ ============== </p>\n\n<p>|| text | rel file path | rivt;plain;default        R I V      </p>\n\n<p>|| append | rel file path | num;nonum                 R        </p>\n\n<p>|| image  | rel file path, .. | .50, ..               I        </p>\n\n<p>|| table  | rel file path | 30,r;l;c                  I        </p>\n\n<p>|| declare | rel file path | print;noprint            V        </p>\n\n<p>====</p>\n\n<h1 id=\"tags\">tags</h1>\n\n<p>rivt tags are typically entered at the end of line and are processed per API\nfunction. Line tags apply to a single line. Block tags appy to blocks of text.</p>\n\n<p>===================== ================================== ==========\n   line tags                 description                   API\n===================== ================================= ===========\ntext _[b]                bold                            R I V \ntext _[c]                center                          R I V <br />\ntext _[i]                italic                          R I V <br />\ntext _[bc]               bold center                     R I V <br />\ntext _[bi]               bold italic                     R I V\ntext _[r]                right justify                   R I V\ntext _[u]                underline                       R I V <br />\ntext _[p]                plain                           R I V <br />\ntext _[l]                LaTeX math                        I V\ntext _[s]                sympy math                        I V\ntext _[bs]               bold sympy math                   I V\ntext _[e]                equation label, autonumber        I V\ntext _[f]                figure caption, autonumber        I V\ntext _[t]                table title, autonumber           I V\ntext _[#]                footnote, autonumber              I V\ntext _[d]                footnote description              I V\n_[page]                  new page                          I V\n_[address, label]        url or internal reference         I V\n= (declare)              a = 1.2 | unit, alt | descrip       V\n:= (assign)              a := b + c | unit, alt | n,n        V</p>\n\n<p>==================== ========================== ==========\n   block tags                description            API\n==================== ========================== ==========\n_[[b]]                  start bold                 R I\n_[[c]]                  start center               R I\n_[[i]]                  start italic               R I\n_[[p]]                  start plain                R I\n_[[l]]                  start LaTeX                  I\n_[[e]]                  end block                  R I</p>\n\n<p>=================</p>\n\n<h1 id=\"rivt-file-example\">rivt file example</h1>\n\n<p>File formatting conventions follow Python pep8 and ruff conventions. API\nfunction declarations start in column one. All other lines are indented 4\nspaces to facilitate section folding, bookmarks and legibility. The first line\nof each function defines the heading for a new document section, followed by\nsection parameters. New sections may be suppressed by prepending the heading\nlabel with a double hyphen (--).</p>\n\n<hr />\n\n<p>import rivtlib.rivtapi as rv</p>\n\n<p>rv.R(\"\"\"Introduction | notoc, 1</p>\n\n<pre><code>The Rivtinit method is the first method of a rivt file and specifies\nrepository, report and document settings.\n\nThe first line of any method is the heading line, which starts a new\ndocument section. If the section heading is preceded by two dashes (--) it\nbecomes a section reference and a new section is not started. The toc\nparameter specifies whether a document table of contents is generated and\ninserted at the top of the document (not to be confused with a report table\nof contents). The page number is the starting page number for the doc, when\nprocessed as a stand alone document.\n\nThe init command specifies the name of the configuration file which is read\nfrom the rivt-doc folder. Report formatting can be easily modified by\nspecifying a different init file.\n\n||init | rivt01.ini\n\nThe text command inserts text from an external file. Text files may be\nplain text or include rivt tags.\n\n||text | private/data/proj.txt | plain\n\nThe append command attaches PDF files to the end of the doc.\n\n|| append | append/report1.pdf\n|| append | append/report2.pdf\n\n\n\"\"\")\n</code></pre>\n\n<p>rv.I(\"\"\"The Insert method | nocolor </p>\n\n<pre><code>The Insert method formats static information e.g. images and text. The\ncolor command specifies a background color for the section.\n\n||text | data01/describe.txt | rivt     \n\nThe table command inserts and formats tabular data from csv or xls files.\nThe _[t] tag formats and autonumbers table titles.\n\nA table title  _[t]\n|| table | data/file.csv | 60,r\n\nThe image command inserts and formats image data from png or jpg files. The\n_[f] tag formats and autonumbers figures.\n\nA figure caption _[f]\n|| image | data/f1.png | 50\n\nTwo images may be placed side by side as follows:\n\nThe first figure caption  _[f]\nThe second figure caption  _[f]\n|| image | private/image/f2.png, private/image/f3.png | 45,35\n\nThe tags _[x] and _[s] format LaTeX and sympy equations:\n\n\\gamma = \frac{5}{x+y} + 3  _[x] \n\nx = 32 + (y/2)  _[s]\n\n\"\"\")\n</code></pre>\n\n<p>rv.V(\"\"\"The Values method |  nosub </p>\n\n<pre><code>The Values method assigns values to variables and evaluates equations. The\nsub or nosub setting specifies whether equations are also printed with\nsubstituted numerical values.\n\nThe equal tag declares a value. A sequence of declared values terminated\nwith a blank line is formatted as a table.\n\nExample of assignment list _[t]\nf1 = 10.1 * LBF |LBF, N| a force value\nd1 = 12.1 * IN  |IN, CM| a length value\n\nAn equation tag provides an equation description and number. A colon-equal\ntag assigns a value and specifies the result units and the output decimal\nplaces printed in the result and equation.\n\nExample equation - Area of circle  _[e]\na1 := 3.14(d1/2)^2 | IN^2, CM^2 | 1,2\n\n|| declare | data01/values02.csv\n\nThe declare command imports values from the csv file written by rivt when\nprocessing values in other documents.\n</code></pre>\n\n<p>\"\"\")</p>\n\n<p>rv.T(\"\"\"The Tools method | summary</p>\n\n<pre><code># The Tools method processes Python code in the rivt namespace and prints\n# the code and the result of any print statement in the doc. \n# Functions may be written explicitly or imported from other\n# files. Line comments (#) are printed. Triple quotes cannot be used. Use\n# raw strings instead.\n\n# Four Python libraries are imported by rivt and available as: \n# pyplot -&gt; plt\n# numpy -&gt; np\n# pandas -&gt; pd\n# sympy -&gt; sy\n\n# Python code example:\n\ndef f1(x,y): z = x + y\n    print(z)\n    return Z\n\nwith open('file.csv', 'r') as f: \n    input = f.readlines()\n\nvar = range(10)\nwith open('fileout.csv', 'w') as f: \n    f.write(var)\n\n\"\"\")\n</code></pre>\n\n<p>rv.X(\"\"\"any text</p>\n\n<pre><code>Changing a function to X skips evaluation of that function. Its uses\ninclude review comments and debugging.\n\n\"\"\")\n</code></pre>\n\n<hr />\n\n<p>=======</p>\n\n<h1 id=\"folders\">folders</h1>\n\n<p>rivtlib can process single rivt files, but typically it is used to generate\nreports. A rivt report is generated from the folder structure illustrated\nbelow. rivt documents are organized into divisions. Document inputs and outputs\nmay be stored in or directed to publically shareable or private foldrers.\nReports is formatted with divisions, subdivisions and sections.</p>\n\n<p>Fixed folder and file prefixes are shown in [ ]. Report and document headings\nare taken from the folder and file labels. Tools are available to generate\nstarter folder templates.</p>\n\n<p>[rivt]_Report-Label/ <br />\n    \u251c\u2500\u2500 [div01]-div-label/            (division folder)\n        \u251c\u2500\u2500 [data01]/                 (resource data)\n            \u251c\u2500\u2500 data.csv <br />\n            \u251c\u2500\u2500 attachment.pdf\n            \u2514\u2500\u2500 fig.png <br />\n             functions.py <br />\n        \u251c\u2500\u2500 [riv01]-label1.py         (rivt file)\n        \u2514\u2500\u2500 [riv02]-label2.py         (rivt file) <br />\n    \u251c\u2500\u2500 [div02]-div-label/            (division folder)\n        \u251c\u2500\u2500 [data02]/                 (resource data)\n            \u251c\u2500\u2500 data.csv\n            \u2514\u2500\u2500 fig.png\n        \u2514\u2500\u2500 [riv01]_label3.py         (rivt file)\n    \u251c\u2500\u2500 [data-private]/ <br />\n        \u251c\u2500\u2500 [data]/                   (private data) <br />\n            \u251c\u2500\u2500 data.csv\n            \u251c\u2500\u2500 attachment.pdf\n            \u2514\u2500\u2500 fig.png <br />\n        \u251c\u2500\u2500 [functions]/              (private functions) <br />\n            \u251c\u2500\u2500 [data]/\n            \u251c\u2500\u2500 [output]/\n            \u2514\u2500\u2500 function.py <br />\n        \u251c\u2500\u2500 [rivt-docs]/              (private output documents)\n            \u251c\u2500\u2500 [pdf]/ <br />\n                \u251c\u2500\u2500 doc0101-label1.pdf <br />\n                \u251c\u2500\u2500 doc0102-label2.pdf\n                \u251c\u2500\u2500 doc0201-label3.pdf\n                \u2514\u2500\u2500 Report-Label.pdf \n            \u251c\u2500\u2500 [text]/ <br />\n                \u251c\u2500\u2500 doc0101-label1.txt <br />\n                \u2514\u2500\u2500 doc0201-label3.txt <br />\n            \u251c\u2500\u2500 doc0101-label1.md <br />\n            \u2514\u2500\u2500 doc0201-label3.md\n        \u251c\u2500\u2500 [temp]/\n            \u2514\u2500\u2500 doc0201-label3.tex \n    \u251c\u2500\u2500 [functions]/                  (public functions) <br />\n        \u251c\u2500\u2500 [data]/\n        \u251c\u2500\u2500 [output]/\n        \u251c\u2500\u2500 function1.py\n        \u2514\u2500\u2500 function2.py <br />\n    \u251c\u2500\u2500 [rivt-docs]/                  (public output documents)\n        \u251c\u2500\u2500 [pdf]/ <br />\n            \u251c\u2500\u2500 doc0101-label1.pdf <br />\n            \u251c\u2500\u2500 doc0102-label2.pdf\n            \u251c\u2500\u2500 doc0201-label3.pdf\n            \u2514\u2500\u2500 Report-Label.pdf \n        \u251c\u2500\u2500 [text]/ <br />\n            \u251c\u2500\u2500 doc0101-label1.txt <br />\n            \u251c\u2500\u2500 doc0102-label2.txt\n            \u2514\u2500\u2500 doc0201-label3.txt <br />\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 config.ini                    (config file)\n    \u251c\u2500\u2500 doc0101-label1.md             (public output documents) \n    \u251c\u2500\u2500 doc0102-label2.md\n    \u251c\u2500\u2500 doc0201-label3.md\n    \u2514\u2500\u2500 README.txt                    (cumulative documents - searchable) </p>\n\n<p>========</p>\n\n<h1 id=\"rivt-doc\">rivt-doc</h1>\n\n<p>rivt-doc is an open source framework that faciliates writing, organizing and\nsharing rivt documents. It includes an editor, typesetting and mnay utilities\nand extensions that reduce the steps needed to produce rivt documents. rivt-doc\nmay be installed on every major OS platform as set of system programs, or as a\nsingle, portable zip file. The framework can also be implemented as a cloud\nservice. It includes:</p>\n\n<ul>\n<li>Python 3.8 or higher </li>\n<li>rivt Python library and dependencies</li>\n<li>VSCode + extensions </li>\n<li>LaTeX </li>\n<li>Github </li>\n</ul>\n\n<p>The minimum software needed to run rivt is:</p>\n\n<ul>\n<li>Python 3.8 or higher </li>\n<li>rivt Python library and dependencies</li>\n</ul>\n\n<p><a href=\"https://www.rivt-doc.net&gt;\">rivt-doc User Manual</a></p>\n\n<p>============= =============================================================\nKeystroke             VSCode rivt profile shortcut description\n============= ==============================================================</p>\n\n<p>alt+q                rewrap paragraph with hard line feeds (80 default)\nalt+p                open file under cursor\nalt+.                select correct spelling under cursor\nalt+8                insert date\nalt+9                insert time</p>\n\n<p>ctl+1                focus on first editor\nctl+2                focus on next editor\nctl+3                focus on previous editor\nctl+8                focus on explorer pane\nctl+9                focus on github pane    </p>\n\n<p>ctl+alt+x            reload window\nctl+alt+u            unfold all code\nctl+alt+f            fold code level 2 (rivt sections visible)\nctl+alt+a            fold code - all levels\nctl+alt+t            toggle local fold\nctl+alt+e            toggle explorer sort order\nctl+alt+s            toggle spell check\nctl+alt+g            next editor group</p>\n\n<p>ctl+shift+u          open URL under cursor in browser\nctl+shift+s          open GitHub README search for rivt\nctl+shift+a          commit all \nctl+shift+z          commit the current editor\nctl+shift+x          post to remote   </p>\n\n<p>============================================== ===============================\nVSCode extension                                       Description\n============================================== ===============================</p>\n\n<p>BUTTON INTERFACES\ntombonnike.vscode-status-bar-format-toggle          format button\ngsppvo.vscode-commandbar                            command buttons\nAdamAnand.adamstool                                 command buttons\nnanlei.save-all                                     save all button\nHo-Wan.setting-toggle                               toggle settings\nyasukotelin.toggle-panel                            toggle panel\nfabiospampinato.vscode-commands                     user command buttons\njerrygoyal.shortcut-menu-bar                        menu bar</p>\n\n<p>EDITING TOOLS\nhenryclayton.context-menu-toggle-comments           toggle comments\nTroelsDamgaard.reflow-paragraph                     wrap paragraph\nstreetsidesoftware.code-spell-checker               spell check\njmviz.quote-list                                    quote elements in a list\nnjpwerner.autodocstring                             insert doc string\noijaz.unicode-latex                                 unicode symbols from latex\njsynowiec.vscode-insertdatestring                   insert date string\njanisdd.vscode-edit-csv                             csv editor</p>\n\n<p>VIEWER TOOLS\nGrapeCity.gc-excelviewer                            excel viewer\nSimonSiefke.svg-preview                             svg viewer\ntomoki1207.pdf                                      pdf viewer\nRandomFractalsInc.vscode-data-preview               data viewing tools\nFr43nk.seito-openfile                               open file from path\nvikyd.vscode-fold-level                             line folding tool\nfile-icons.file-icons                               icon library\ntintinweb.vscode-inline-bookmarks                   inline bookmarks</p>\n\n<p>MANAGEMENT TOOLS\nalefragnani.project-manager                         folder, project management\nAnjali.clipboard-history                            clipboard history\ndionmunk.vscode-notes                               notepad\nhbenl.vscode-test-explorer                          test explorer\nmightycoco.fsdeploy                                 save file to second location\nlyzerk.linecounter                                  count lines in files\nsandcastle.vscode-open                              open files in default app\nJames-Yu.latex-workshop                             latex tools\nlextudio.restructuredtext                           restructured text tools\ntrond-snekvik.simple-rst                            restructured syntax\nyzane.markdown-pdf                                  markdown to pdf\nyzhang.markdown-all-in-one                          markdown tools\nzjffun.snippetsmanager                              snippet manager\nspmeesseman.vscode-taskexplorer                     task explorer</p>\n\n<p>GITHUB TOOLS\nGitHub.codespaces                                   run files in codespaces\nGitHub.remotehub                                    run remote files\nettoreciprian.vscode-websearch                      search github within VSCode\ndonjayamanne.githistory                             git history\nMichaelCurrin.auto-commit-msg                       git auto commit message <br />\ngithub.vscode-github-actions                        github actions\nGitHub.vscode-pull-request-github                   github pull request\nk9982874.github-gist-explorer                       gist explorer\nvsls-contrib.gistfs                                 gist tools</p>\n\n<p>PYTHON TOOLS\nms-python.autopep8                                  python pep8 formatting\nms-python.isort                                     python sort imports\ndonjayamanne.python-environment-manager             python library list\nms-python.python                                    python tools\nms-python.vscode-pylance                            python language server\nms-toolsai.jupyter                                  jupyter tools\nms-toolsai.jupyter-keymap                           jupyter tools\nms-toolsai.jupyter-renderers                        jupyter tools\nms-toolsai.vscode-jupyter-cell-tags                 jupyter tools\nms-toolsai.vscode-jupyter-slideshow                 jupyter tools</p>\n\n<p>OTHER LANGUAGES\nqwtel.sqlite-viewer                                 sqlite tools\nRDebugger.r-debugger                                R tools\nREditorSupport.r                                    R tools\nms-vscode-remote.remote-wsl                         windows linux tools</p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();